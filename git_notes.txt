1: check if git is intalled:
    git version

2: configure git
    #global(all repos for current user) sets the level at which the config is being done. 
    #other options include system(all users) and local(current repo)
    git config --global user.name "First Name"
    git config --global user.email email@email.com

    #set vscode as primary editor. for the step below to work, vscode should be included in the PATH.
    #you can check if vscode is in the PATH by testing if entering "code" in the terminal opens up vscode.
    #if vscode is not in the PATH, then look here: https://code.visualstudio.com/docs/setup/mac
    #"code --wait" opens vscode and asks the terminal to wait until its closed 
    git config --global core.editor "code --wait"

    #open git config file
    git config --global e

    #configure end of line. swap "input" with "true" for windows systems
    git config --global core.autocrlf input

3: Set up git for a project
    #initialize git after navigating to project directory
    git init
    #this creates a .git subdirectory that is hidden and should not be touched. 
    #removing this subdirectory directory will result in the repository being deleted.

4: Basic git workflow
    #make changes to files in project directory and save changes -> stage changes -> commit changes
    #with each commit git saves a complete snapshot of the entire project (not just the deltas)

    #STAGING
    #for git to start tracking changes, you first need to specify which files within the project directory git should track or stage
    #for specific files
    git add filename1.txt filename2.py
    #for all files with given extension
    git add *.txt
    #for all subdirectories within folder
    git add .
    #git add moves the added files to the staging area. if any changes are made to the files after it's been staged, 
    #the file needs to be staged again before the changes are commited.

    #COMMITTING
    #once changes have been staged, they need to be committed in order for git to take a snapshot.
    #when committing, it's best practice to include a description about the changes that are being committed
    #for short descriptions
    git commit "initial commit"
    #for long descriptions
    git commit
    #this opens the default code editor and allows you to describe the changes being committed.

    #general tips for committing
    #1.work on single topic or area for a commit
    #2.commit often, but not too often
    #3.included meaningful commit messages

    #REMOVING FILES
    #to remove a tracked file
    rm filename1.txt
    #once a file is removed, you still need to stage and commit
    #you can also remove files using git rm. this would remove the file from the working directory and also the staging area
    git rm filename.txt